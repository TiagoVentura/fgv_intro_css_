tibble::as_tibble()
api
api
# url basica de ocorrencias.
base_url <- "https://api.fogocruzado.org.br/api/v1"
occurences <- "/occurrences"
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&nome_cidade=Rio de Janeiro"
api <- paste0(base_url, occurences, filter)
print(api)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
output <- jsonlite::fromJSON(httr::content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
response
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01"
api <- paste0(base_url, occurences, filter)
print(api)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
output <- jsonlite::fromJSON(httr::content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
View(output)
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&estado_id[]=24"
api <- paste0(base_url, occurences, filter)
print(api)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
output <- jsonlite::fromJSON(httr::content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
View(output)
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&estado_id[]=25"
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
output <- jsonlite::fromJSON(httr::content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
View(output)
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&estado_id[]=19"
api <- paste0(base_url, occurences, filter)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
output <- jsonlite::fromJSON(httr::content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
View(output)
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&nome_cidade[]=Rio de Janeiro"
api <- paste0(base_url, occurences, filter)
print(api)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
response
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&nome_cidade=Rio de Janeiro"
api <- paste0(base_url, occurences, filter)
print(api)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
output <- jsonlite::fromJSON(httr::content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&CidadeID=3594"
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
response
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&CidadeID[]=3594"
api <- paste0(base_url, occurences, filter)
print(api)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&nome_cidade[]=Abreu e Lima"
api <- paste0(base_url, occurences, filter)
print(api)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
# Passo 1. Crie a Url
base_url <- "https://api.fogocruzado.org.br/api/v1"
cities <- "/cities"
api <- paste0(base_url, cities)
print(api)
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
# Qual o resultado?
response
# Converter para um json
json_fogo_cruzado <- content(response, as="text", encoding = "UTF-8")
json_fogo_cruzado
json_fogo_cruzado
json_fogo_cruzado[1:100]
json_fogo_cruzado[1]
# Limpando Jsons
output <- fromJSON(json_fogo_cruzado) %>%
tibble::as_tibble()
output
View(output)
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&CidadeID[]=3661"
# url basica de ocorrencias.
base_url <- "https://api.fogocruzado.org.br/api/v1"
occurences <- "/occurrences"
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&CidadeID[]=3661"
api <- paste0(base_url, occurences, filter)
print(api)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
output <- jsonlite::fromJSON(httr::content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
output
ggmap(get_googlemap("rio de janeiro", zoom = 11, maptype = "roadmap", scale=2)) +
geom_point(data = output,
aes(x = longitude_ocorrencia,
y = latitude_ocorrencia),
color="tomato2", alpha=.8, size = 2)
library(congressbr)
devtools::install_github("RobertMyles/congressbr")
library(congressbr)
# Ajuda em R
?cham_legislator_list
all <- cham_legislator_list()
glimpse(all)
ano<-c(2002:2018)
proposicoes <- map(ano, ~
cham_plenary_bills(.x) %>%
mutate(ano=.x))
proposicoes <- bind_rows(proposicoes)
proposicoes <- proposicoes %>% distinct()
proposicoes_ano <- proposicoes %>% count(ano)
# Marcar anos pre eleitorais
proposicoes_ano <- proposicoes_ano %>%
mutate(ano_eleitoral=ifelse(ano==2002|ano==2006|
ano==2010|ano==2014|ano==2018, "Ano Eleitoral",
"Ano Não Eleitoral"))
ggplot(proposicoes_ano, aes(y=n, x=ano, fill=ano_eleitoral)) +
geom_col() +
scale_fill_manual(name="", values = c("darkred", "darkblue")) +
theme_minimal() +
xlab("ano") + ylab("Proposições Votadas")
# local if you prefer on your working directory
setwd("/home/venturat/Downloads")
results <- read_csv("simple_example.csv")
results <- as.data.frame(results)
# Identify Maximally similar
rownames(results) <- results$Name
# get the distance matrix using the euclidean space
dmatrix <- dist(results, method = "euclidean")
# hierarchical clustering to find similarity
fit <- hclust(dmatrix, method="ward.D")
# display dendogram
plot(fit)
groups <- cutree(fit, k=10) # cut tree into 5 clusters
# draw dendogram with cut points for groups
rect.hclust(fit, k=10, border="red")
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
# Pacotes para acessar APIs
library(httr)
library(jsonlite)
library(tidyverse)
# Pacotes para acessar APIs
library(httr)
library(jsonlite)
library(tidyverse)
# Solicitar a senha
get_jwt <- httr::POST("https://api.fogocruzado.org.br/api/v1/auth/login",
query = list(email = "venturat@umd.edu", password = "ptds42420678"))
# Pegar a senha
token <- httr::content(get_jwt)$access_token
# token = sua senha de acesso à API. Nao compartilhe por ai.
# Pacotes para acessar APIs
library(httr)
library(jsonlite)
library(tidyverse)
get_jwt <- httr::POST("https://api.fogocruzado.org.br/api/v1/auth/login",
query = list(email = "venturat@umd.edu", password = "ptds42420678"))
httr::POST("https://api.fogocruzado.org.br/api/v1/auth/login",
query = list(email = "venturat@umd.edu", password = "ptds42420678"))
get_jwt <- httr::POST("https://api.fogocruzado.org.br/api/v1/auth/login",
query = list(email = "venturat@umd.edu", password = "ptds42420678"))
# Solicitar a senha
get_jwt <- httr::POST("https://api.fogocruzado.org.br/api/v1/auth/login",
query = list(email = "venturat@umd.edu", password = "xxxxxx"))
# Passo 1. Crie a Url
base_url <- "https://api.fogocruzado.org.br/api/v1"
cities <- "/cities"
api <- paste0(base_url, cities)
print(api)
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
response <- GET(api,
add_headers('Authorization' = paste("Bearer", "os", sep = " ")))
# Solicitar a senha
get_jwt <- httr::POST("https://api.fogocruzado.org.br/api/v1/auth/login",
query = list(email = "venturat@umd.edu", password = "xxxxxx"))
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
xaringan::inf_mr()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
library(knitr)
library(rmdformats)
## Global options
opts_chunk$set(cache=TRUE,
prompt=FALSE,
comment=NA,
message=FALSE,
warning=FALSE,
error=TRUE)
library(httr)
library(tidyverse)
# Acesse a API
endpoint = "https://dog.ceo/api/breeds/image/random"
acesso = GET(endpoint)
# O que é este arquivo?
class(acesso)
### Quarto Passo: Acesse os dados via content.
A função `content` dará a você o acesso as respostas de cada GET request da API. A partir daí, podemos limpar e usar nossos dados.
```{r}
# Veja os elementos
content(acesso)
# Acesso a mensagem de resposta
link_image <- content(acesso)$message
download.file("https://images.dog.ceo/breeds/poodle-standard/n02113799_1439.jpg",
destfile = "cao.png")
# Pacotes para acessar APIs
library(httr)
library(jsonlite)
library(tidyverse)
get_jwt <- httr::POST("https://api.fogocruzado.org.br/api/v1/auth/login",
query = list(email = "venturat@umd.edu", password = "ptds42420678"))
# Pegar a senha
token <- httr::content(get_jwt)$access_token
# token = sua senha de acesso à API. Nao compartilhe por ai.
```
httr::content(get_jwt)$access_token
token
# Passo 1. Crie a Url
base_url <- "https://api.fogocruzado.org.br/api/v1"
cities <- "/cities"
api <- paste0(base_url, cities)
print(api)
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
# Qual o resultado?
response
# Converter para um json
json_fogo_cruzado <- content(response, as="text", encoding = "UTF-8")
json_fogo_cruzado
# Limpando Jsons
output <- fromJSON(json_fogo_cruzado) %>%
tibble::as_tibble()
output
# url basica de ocorrencias.
base_url <- "https://api.fogocruzado.org.br/api/v1"
occurences <- "/occurrences"
api <- paste0(base_url, occurences)
print(api)
# Cria Query
query_list <- list(data_ocorrencia="2019-01-01",
nome_cidade= "Rio de Janeiro")
# GET
response <- GET(api,
query=query_list,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
output <- jsonlite::fromJSON(httr::content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
View(output)
# url basica de ocorrencias.
base_url <- "https://api.fogocruzado.org.br/api/v1"
occurences <- "/occurrences"
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&CidadeID[]=3661"
api <- paste0(base_url, occurences, filter)
print(api)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
output <- jsonlite::fromJSON(httr::content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
output
#install.packages("ggmap")
library(ggmap)
register_google('AIzaSyDG-v66MvW5OjvlY8QlTAewh2YyZNt8iDs') # insert your API key here
library(ggmap)
library(RColorBrewer)
ggmap(get_googlemap("rio de janeiro", zoom = 11, maptype = "roadmap", scale=2)) +
geom_point(data = output,
aes(x = longitude_ocorrencia,
y = latitude_ocorrencia),
color="tomato2", alpha=.8, size = 2)
api
GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
GET("https://dadosabertos.camara.leg.br/api/v2/blocos?id=580")
content(GET("https://dadosabertos.camara.leg.br/api/v2/blocos?id=580")_
content(GET("https://dadosabertos.camara.leg.br/api/v2/blocos?id=580"))
xaringan::inf_mr()
blogdown::serve_site()
blogdown::serve_site()
library(httr)
library(tidyverse)
# Acesse a API
endpoint = "https://dog.ceo/api/breeds/image/random"
acesso = GET(endpoint)
# O que é este arquivo?
class(acesso)
xaringan::inf_mr()
download.file("https://images.dog.ceo/breeds/poodle-standard/n02113799_1439.jpg",
destfile = "cao.png")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
xaringan::inf_mr()
get_jwt <- httr::POST("https://api.fogocruzado.org.br/api/v1/auth/login",
query = list(email = "venturat@umd.edu", password = "ptds42420678"))
# Pegar a senha
token <- httr::content(get_jwt)$access_token
token
# Aula APIS
library(httr)
library(tidyverse)
# Acesse a API
endpoint = "https://dog.ceo/api/breeds/image/random"
acesso = GET(endpoint)
# O que é este arquivo?
class(acesso)
acesso
# Veja os elementos
content(acesso)
# Veja os elementos
content(acesso)
# Acesso a mensagem de resposta
link_image <- content(acesso)$message
link_image
link_image
browseURL(link_image)
acesso = GET(endpoint)
# O que é este arquivo?
class(acesso)
acesso
# Veja os elementos
content(acesso)
# Acesso a mensagem de resposta
link_image <- content(acesso)$message
browseURL(link_image)
acesso = GET(endpoint)
# O que é este arquivo?
class(acesso)
acesso
# Veja os elementos
content(acesso)
# Acesso a mensagem de resposta
link_image <- content(acesso)$message
browseURL(link_image)
get_jwt <- httr::POST("https://api.fogocruzado.org.br/api/v1/auth/login",
query = list(email = "venturat@umd.edu", password = "ptds42420678"))
get_jwt
content(get_jwt)
# Pegar a senha
token <- httr::content(get_jwt)$access_token
token
# Passo 1. Crie a Url
base_url <- "https://api.fogocruzado.org.br/api/v1"
cities <- "/cities"
api <- paste0(base_url, cities)
print(api) # somente um site
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
# Qual o resultado?
response
# Qual o resultado?
response
# Qual o resultado?
content(response)
# Qual o resultado?
content(response)
# Converter para um json
json_fogo_cruzado <- content(response, as="text", encoding = "UTF-8")
json_fogo_cruzado
# Limpando Jsons
output <- fromJSON(json_fogo_cruzado) %>%
tibble::as_tibble()
output
fromJSON(json_fogo_cruzado)
fromJSON(json_fogo_cruzado) %>%
tibble::as_tibble()
# url basica de ocorrencias.
base_url <- "https://api.fogocruzado.org.br/api/v1"
occurences <- "/occurrences"
api <- paste0(base_url, occurences)
# url basica de ocorrencias.
base_url <- "https://api.fogocruzado.org.br/api/v1"
occurences <- "/occurrences"
api <- paste0(base_url, occurences)
erro_api <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
print(api)
api
erro_api
# Cria Query
query_list <- list(data_ocorrencia="2019-01-01",
nome_cidade= "Rio de Janeiro")
query_list
# url basica de ocorrencias.
base_url <- "https://api.fogocruzado.org.br/api/v1"
occurences <- "/occurrences"
api <- paste0(base_url, occurences)
api
# GET
response <- GET(api,
query=query_list,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
response
output <- fromJSON(content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
output
View(output)
# url basica de ocorrencias.
base_url <- "https://api.fogocruzado.org.br/api/v1"
occurences <- "/occurrences"
filter= "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&CidadeID[]=3661"
filter
filter <- "?data_ocorrencia[gt]=2019-01-01&data_ocorrencia[lt]=2019-05-01&CidadeID[]=3661"
filter
api <- paste0(base_url, occurences, filter)
print(api)
# GET
response <- GET(api,
add_headers('Authorization' = paste("Bearer", token, sep = " ")))
response
output <- jsonlite::fromJSON(httr::content(response, as="text", encoding = "UTF-8")) %>%
tibble::as_tibble()
output
library(crossfire)
crossfire::fogocruzado_signin(email = "venturat@umd.edu", password = "ptds42420678")
fogocruzado_rj <- crossfire::get_fogocruzado(state= "RJ", security_agent = 1)
fogocruzado_rj
fogocruzado_rj <- crossfire::get_fogocruzado(state= "RJ", security_agent = 1)
fogocruzado_rj
dim(fogocruzado_rj)
library(ggmap)
register_google('AIzaSyDG-v66MvW5OjvlY8QlTAewh2YyZNt8iDs') # insert your API key here
get_googlemap("rio de janeiro", zoom = 11, maptype = "roadmap", scale=2)
mapa <- get_googlemap("rio de janeiro", zoom = 11, maptype = "roadmap", scale=2)
mapa
ggmap(mapa)
ggmap(get_googlemap("rio de janeiro", zoom = 11, maptype = "roadmap", scale=2)) +
geom_point(data = fogocruzado_rj,
aes(x = longitude_ocorrencia,
y = latitude_ocorrencia),
alpha=.8, size = 0.5, color="darkred")
?get_fogocruzado
xaringan::inf_mr()
?cham_plenary_bills
ano_2002 <-cham_plenary_bills(year=2002)
ano_2002
ano_2002 <- cham_plenary_bills(year=2002)
View(ano_2002)
ano<-c(2002:2018)
ano
proposicoes <- map(ano, ~
cham_plenary_bills(.x) %>%
mutate(ano=.x))
proposicoes
proposicoes <- bind_rows(proposicoes)
proposicoes
proposicoes <- proposicoes %>% distinct()
proposicoes_ano <- proposicoes %>% count(ano)
proposicoes_ano
# Marcar anos pre eleitorais
proposicoes_ano <- proposicoes_ano %>%
mutate(ano_eleitoral=ifelse(ano==2002|ano==2006|
ano==2010|ano==2014|ano==2018, "Ano Eleitoral",
"Ano Não Eleitoral"))
ggplot(proposicoes_ano, aes(y=n, x=ano, fill=ano_eleitoral)) +
geom_col() +
scale_fill_manual(name="", values = c("darkred", "darkblue")) +
theme_minimal() +
xlab("ano") + ylab("Proposições Votadas")
