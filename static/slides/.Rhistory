mutate(term=fct_recode(term, "Two-Tailed Test Statistic "="Custom Test Statistic"))
# Plot
plot(ri2_out)
# Chunk 11
mig_data <- tribble(~group, ~z, ~d, ~y, ~n,
"T",  1, 1, 424.4, 65,
"T", 1, 0, 81.1, 55,
"Total", 1, NA,  267.1, 120,
"C", 0, 1, NA, 0,
"C", 0, 0, 104.1, 78,
"Total", 0, 1, 104.1, 78)
## ITT
E_y_z1 = mig_data %>%
filter(group=="Total",
z==1)  %>% pull(y)
E_y_z0 = mig_data %>%
filter(group=="Total",
z==0) %>% pull(y)
ITT= E_y_z1-E_y_z0
## ITTd
ITTd = mig_data %>%
filter(z==1, !is.na(d)) %>%
mutate(total=sum(n),
n=n/total) %>%
filter(d==1) %>% pull(n)
# CACE
cace=ITT/ITTd
# table
tab <- tibble(Point_Estimate=c("ITT", "ITTd", "CACE"),
Values=c(ITT, ITTd, cace)) %>%
mutate(Values=round(Values, digits=2))
kbl(tab, booktabs = T,
caption = "Point Estimate for the Lottery Experiment") %>%
kable_styling(font_size = 12, full_width = F)
# Chunk 12
# Load the Packages
pacman::p_load(dagitty, ggdag, causaleffect, igraph, latex2exp)
# The Causal Model
coords <- data.frame(matrix(c("z",0,0,
"p",1, 0,
"y",3,0,
"d",2,0,
"u1",0,2,
"u2",2,2),
nrow=, ncol=3, byrow=T))
colnames(coords) <- c("name","x","y")
# model
model7 <- dagify(y~ d,
d ~ p,
p ~ z,
y ~ u2,
d ~ u1,
d  ~ u1 + u2,
p ~ u1,
outcome="y",
exposure="z",
latent=c("u1", "u2"),
coords=coords)
relevel <- list("Unobserved" = "latent",
"Treatment Assignment" = "exposure",
"Outcome"= "outcome")
tidy_dag <- model7 %>%
tidy_dagitty() %>%
node_status()   %>%
mutate(status2=ifelse(is.na(status), "Treatment",
as.character(status)),
status2=fct_recode(status2, !!!relevel))
status_colors <- c('Treatment Assignment' = "#0074D9",
Outcome = "goldenrod1",
Unobserved = "grey50",
Treatment= "tomato2")
ggplot(tidy_dag, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_edges() +
geom_dag_point(aes(color = status2) ,alpha=.5) +
geom_dag_label_repel(aes(label = name, fill = status2), seed = 1234,
color = "white", fontface = "bold") +
scale_color_manual(values = status_colors, na.value = "grey20") +
scale_fill_manual(values = status_colors, na.value = "grey20") +
guides(color = FALSE) +
theme_dag() +
labs(title = "Variation From an One Sided Non Compliance Experiment")
# Chunk 13
# Read the data
d3 <- read_csv("housing.csv")
# Control Families
dcontrol <- d3 %>% filter(treated==0)
# Chunk 14
pacman::p_load("estimatr","texreg", "modelsummary", "ggrepel")
colnames(dcontrol)
# Model 1
mod1 <-lm_robust(rent ~ inc + famsiz + phoenix + post +
phoenix*post + hed + femh + race,
data=dcontrol,
clusters = id)
# Chunk 15
# Reshape to get the first differences
dc_wide = dcontrol %>%
pivot_wider(id_cols = id,
names_from=post,
values_from=c(treated, race, rent, calcpay,
inc, race, phoenix,
famsiz, hed, femh),
names_glue = "{.value}_t{post}")
dc_wide %>% select(contains("race"))
# First Differences
dc_fd = dc_wide %>%
mutate(rent_fd=rent_t1-rent_t0,
inc_fd=inc_t1-inc_t0,
famsiz_fd=famsiz_t1-famsiz_t0,
hed_fd=hed_t1-hed_t0,
femh_fd=femh_t1-femh_t0)
#model fd
mod_fd <-lm_robust(rent_fd ~ inc_fd +
famsiz_fd + phoenix_t1 +
hed_fd + femh_fd +
race_t1,
data=dc_fd,
clusters = id)
# Chunk 16
mod3 =  lm_robust(rent_t1 ~ rent_t0 +
inc_t0 +
famsiz_t0 +
phoenix_t1 +
hed_t0 +
femh_t0 +
race_t1,
data=dc_fd,
clusters = id)
# Chunk 17
graph = list(mod1, mod_fd, mod3) %>%
set_names(c("Model 1",
"Model First Differences", "Model 3")) %>%
map2_dfr(., names(.), ~tidy(.x) %>%
mutate(model=.y,
up=estimate+1.96*std.error,
lb=estimate-1.96*std.error,
estimate=round(estimate, digits = 4),
pvalue=ifelse(p.value<0.051, "**",
ifelse(p.value<0.001, "***", "")),
label=paste0(estimate, " (", pvalue, ")"))) %>%
mutate(model=fct_relevel(model, "Model 1",
"Model First Differences", "Model 3")) %>%
ggplot(., aes(y=estimate, x=term, ymax=up, ymin=lb, label=label)) +
geom_pointrange(shape=21, fill="white", size=.5,
position=position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype="dashed", color="darkred") +
geom_text_repel(
fontface = "italic", fill="white",
color = "black",
box.padding = unit(0.35, "lines"),
segment.color = "gray",
nudge_x = .3,
nudge_y = -.1,
arrow = arrow(length = unit(0.01, 'npc')),
point.padding = unit(0.01, 'npc'), size=4)   +
coord_flip() +
labs(title = "Housing Models",
y="Point-Estimates",
x=" ") +
theme_minimal() +
facet_wrap(~model, scales = "free")
# Chunk 18
graph
# Chunk 19
library(rsample)
data(wa_churn, package = "modeldata")
# Create a Function for each model
# Model 1
model_1 <- function(data){
mod1 <-lm_robust(rent ~ inc + famsiz + phoenix + post +
phoenix*post + hed + femh + race,
data=analysis(data),
clusters = id)
coef(mod1)["inc"]
}
# Model fd
model_fd <- function(data){
mod_fd <-lm_robust(rent_fd ~ inc_fd +
famsiz_fd + phoenix_t1 +
hed_fd + femh_fd +
race_t1,
data=analysis(data),
clusters = id)
coef(mod_fd)["inc_fd"]
}
#model 3
model_3 <- function(data){
mod = lm_robust(rent_t1 ~ rent_t0 +
inc_t0 +
famsiz_t0 +
phoenix_t1 +
hed_t0 +
femh_t0 +
race_t1,
data=analysis(data),
clusters = id)
coef(mod)["inc_t0"]
}
## Bootstrap estimates for the Model
coef_mod1 <- dcontrol %>%
bootstraps(500) %>%
mutate(model = map(splits,model_1),
type="Model 1") %>%
unnest(model) %>%
select(id, model, type)
coef_mod2 <- dc_fd %>%
bootstraps(500) %>%
mutate(model = map(splits,model_fd),
type="Model FD") %>%
unnest(model) %>%
select(id, model, type)
coef_mod3 <- dc_fd %>%
bootstraps(500) %>%
mutate(model = map(splits,model_3),
type= "Model 3") %>%
unnest(model) %>%
select(id, model, type)
# values iin the treatment
calc <- d3 %>%
filter(treated==1, post==1) %>%
pull(calcpay) %>% mean(.)
# Expand
results <- map_dfr(list(coef_mod1, coef_mod2, coef_mod3), ~
expand_grid(.x, calc)) %>%
mutate(marginal_effect=12*(calc)*model) %>%
group_by(type, calc) %>%
summarise(m_effect=mean(marginal_effect, na.rm=TRUE),
sd_effect=sd(marginal_effect, na.rm=TRUE),
up=m_effect+1.96*sd_effect,
lb=m_effect-1.96*sd_effect) %>%
ungroup() %>%
mutate(type=fct_inorder(type),
type=fct_relevel(type, "Model 1", "Model FD", "Model 3"))
# Graph
pal=wesanderson::wes_palette("GrandBudapest1", 3, "discrete")
ggplot(results, aes(y=m_effect,  x=type,
ymax=up, ymin=lb, fill=type)) +
geom_point()+
geom_pointrange(shape=21, size=1, color="gray", alpha=.8) +
geom_hline(aes(yintercept=0), linetype="dashed", color="tomato2") +
labs(y="Predicted Income Effect",
x="Financial Incentive (Treatment Group)",
title = "") +
scale_fill_manual(values = pal, name="Model") +
theme_minimal()
# Chunk 20
mod5 <- lm_robust(rent ~ post + treated +
post*treated ,
data=d3,
clusters = id)
mod6 <- lm_robust(rent ~ post + treated +
post*treated +
phoenix +
phoenix*post*treated,
data=d3,
clusters = id)
list_models <- list(
"Model 5"     = mod5,
"Model 6" = mod6)
modelsummary(list_models, output = "latex",
title = "Treatment Effects Regression Results",
stars=TRUE)
#install.packages("pacman")
pacman::p_load(tidyverse, here, wesanderson, stargazer,
extrafont, broom)
# Chunk 1: setup
knitr::opts_chunk$set(cache=TRUE,
prompt=FALSE,
tidy=FALSE,
comment=NA,
message=FALSE,
warning=FALSE,
cache.lazy = FALSE)
# Chunk 3
#install.packages("pacman")
pacman::p_load(tidyverse, here, wesanderson, stargazer,
extrafont, broom)
# Chunk 4
d <- read_csv(here("olken.csv"))
# Chunk 5
model1 <- lm(pct_missing ~ treat_invite, data = d)
stargazer(model1, header=FALSE, type='latex')
# Chunk 6
model1 %>%
tidy() %>%
mutate(up=estimate+1.96*std.error,
lb=estimate-1.96*std.error,
up90=estimate+1.64*std.error,
lb90=estimate-1.64*std.error,
term=if_else(str_detect(term, "treat"), "ATE",term )) %>%
ggplot(., aes(y=estimate, x=term, ymax=up, ymin=lb)) +
geom_pointrange(shape=21, fill="white", size=.5,
position=position_dodge(width = .5)) +
geom_pointrange(aes(ymax=up90, ymin=lb90), shape=21,
fill="white", size=1.5,
position=position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype="dashed", color="darkred") +
coord_flip() +
labs(title = "Average Treatment Effects (Olken's Example)",
y="Point-Estimates",
x=" ") +
theme_minimal()
# Chunk 7
pacman::p_load("DeclareDesign", "ri2")
# Randomization Inference:  ----------------------------------
N <- nrow(d)
declaration <- declare_ra(N = N)
balance_fun <- function(data) {
summary(lm(treat_invite ~ head_edu +  mosques + pct_poor +
+ total_budget , data = data))$f[1]
}
# Confirm it works!
balance_fun(d)
# Conduct Ri
ri2_out <-
conduct_ri(
test_function = balance_fun,
declaration = declaration,
assignment = "treat_invite",
sharp_hypothesis = 0,
data = d,
sims=500
)
# Adjust the graph
ri2_out$sims_df <- ri2_out$sims_df %>%
mutate(term=fct_recode(term, "F-statistics"="Custom Test Statistic"))
# Summary
summary(ri2_out)
# Plot
plot(ri2_out)  +
theme_minimal() +
labs(title = "",
y="Count")
# Chunk 8
pacman::p_load("rstatix", "ggpubr", "kableExtra")
names=colnames(d[3:6])
head_edu_t <- d %>%
pairwise_t_test(head_edu ~treat_invite)
mosques <- d %>%
pairwise_t_test(mosques ~treat_invite)
pct_poor <- d %>%
pairwise_t_test(pct_poor ~treat_invite)
total_budget <- d %>%
pairwise_t_test(total_budget ~treat_invite)
# Chunk 9
## Table
bind_rows(head_edu_t, mosques, pct_poor, total_budget) %>%
mutate(term=names) %>%
select(term, n1, n2, p, p.adj) %>%
set_names("Covariate", "N Treatment", "N Control",
"P-Value Mean Difference", "Buffaroni Adjusted P-Value") %>%
kbl(., caption = "Covariate Balance Between Treatment and Control Groups") %>%
kable_styling(font_size = 11, full_width = F)
# Chunk 10
N <- nrow(d)
declaration <- declare_ra(N = N, m=191)
mean_diff_ri <- function(data) {
coef(lm(pct_missing ~ treat_invite, data=data))[2]
}
# Confirm it works!
mean_diff_ri(d)
# Conduct Ri
ri2_out <-
conduct_ri(
test_function = mean_diff_ri,
declaration = declaration,
assignment = "treat_invite",
sharp_hypothesis = 0,
data = d,
sims=5000
)
# Adjust the graph
ri2_out$sims_df <- ri2_out$sims_df %>%
mutate(term=fct_recode(term, "Two-Tailed Test Statistic "="Custom Test Statistic"))
# Plot
plot(ri2_out)
# Chunk 11
mig_data <- tribble(~group, ~z, ~d, ~y, ~n,
"T",  1, 1, 424.4, 65,
"T", 1, 0, 81.1, 55,
"Total", 1, NA,  267.1, 120,
"C", 0, 1, NA, 0,
"C", 0, 0, 104.1, 78,
"Total", 0, 1, 104.1, 78)
## ITT
E_y_z1 = mig_data %>%
filter(group=="Total",
z==1)  %>% pull(y)
E_y_z0 = mig_data %>%
filter(group=="Total",
z==0) %>% pull(y)
ITT= E_y_z1-E_y_z0
## ITTd
ITTd = mig_data %>%
filter(z==1, !is.na(d)) %>%
mutate(total=sum(n),
n=n/total) %>%
filter(d==1) %>% pull(n)
# CACE
cace=ITT/ITTd
# table
tab <- tibble(Point_Estimate=c("ITT", "ITTd", "CACE"),
Values=c(ITT, ITTd, cace)) %>%
mutate(Values=round(Values, digits=2))
kbl(tab, booktabs = T,
caption = "Point Estimate for the Lottery Experiment") %>%
kable_styling(font_size = 12, full_width = F)
# Chunk 12
# Load the Packages
pacman::p_load(dagitty, ggdag, causaleffect, igraph, latex2exp)
# The Causal Model
coords <- data.frame(matrix(c("z",0,0,
"p",1, 0,
"y",3,0,
"d",2,0,
"u1",0,2,
"u2",2,2),
nrow=, ncol=3, byrow=T))
colnames(coords) <- c("name","x","y")
# model
model7 <- dagify(y~ d,
d ~ p,
p ~ z,
y ~ u2,
d ~ u1,
d  ~ u1 + u2,
p ~ u1,
outcome="y",
exposure="z",
latent=c("u1", "u2"),
coords=coords)
relevel <- list("Unobserved" = "latent",
"Treatment Assignment" = "exposure",
"Outcome"= "outcome")
tidy_dag <- model7 %>%
tidy_dagitty() %>%
node_status()   %>%
mutate(status2=ifelse(is.na(status), "Treatment",
as.character(status)),
status2=fct_recode(status2, !!!relevel))
status_colors <- c('Treatment Assignment' = "#0074D9",
Outcome = "goldenrod1",
Unobserved = "grey50",
Treatment= "tomato2")
ggplot(tidy_dag, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_edges() +
geom_dag_point(aes(color = status2) ,alpha=.5) +
geom_dag_label_repel(aes(label = name, fill = status2), seed = 1234,
color = "white", fontface = "bold") +
scale_color_manual(values = status_colors, na.value = "grey20") +
scale_fill_manual(values = status_colors, na.value = "grey20") +
guides(color = FALSE) +
theme_dag() +
labs(title = "Variation From an One Sided Non Compliance Experiment")
pacman::p_load("estimatr","texreg", "modelsummary", "ggrepel")
colnames(dcontrol)
# Model 1
mod1 <-lm_robust(rent ~ inc + famsiz + phoenix + post +
phoenix*post + hed + femh + race,
data=dcontrol,
clusters = id)
dcontrol
# Read the data
d3 <- read_csv("housing.csv")
# Read the data
d3 <- read_csv(here("housing.csv")))
getwd()
here::here()
knitr::purl("ventura_pset_eth.Rmd")
getwd()
here()
library(here)
mean(x = sample(1:50, 5)) == mean(x) # TRUE ou FALSE
x=5
mean(x = sample(1:50, 5)) == mean(x) # TRUE ou FALSE
x = sample(1:50, 5)
x=10
mean(x = sample(1:50, 5)) == mean(x) # TRUE ou FALSE
false <- "FALSE"
false <- as.logical(false)
class(false)
ary(tidyverse)
library(summarytools)
# Packages ----------------------------------------------------------------
library(tidyverse)
library(summarytools)
library(lubridate)
library(scales)
library(conflicted)
library(rebus)
library(patchwork)
library(extrafont)
library(broom)
library(tidyr)
library(here)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
# Download the data -------------------------------------------------------
load("data/CV_data.Rdata")
getwd()
getwd()
getwd()
setwd("~/Dropbox/fgv_capes_print/website/fgv_intro_css_/static/slides")
build_pdf("slides_experimentos_ufmg.html")
remotes::install_github("jhelvy/xaringanBuilder")
remotes::install_github("jhelvy/xaringanBuilder")
install.packages("av")
remotes::install_github("jhelvy/xaringanBuilder")
install.packages("xaringanBuilder")
remotes::install_github("jhelvy/xaringanBuilder", force = TRUE)
pagedown::chrome_print("slides_experimentos_ufmg.Rmd")
pagedown::chrome_print("slides_experimentos_ufmg.Rmd")
